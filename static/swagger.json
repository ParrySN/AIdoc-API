openapi: 3.0.3
info:
  title: Swagger AIDOCS
  description: |-
    A detailed API specification for fetching reports including AI predictions, dentist diagnoses, and overall statistics, as well as user management functionalities.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000
tags:
  - name: report
    description: Get users report
  - name: admin
    description: Admin management 
paths:
  /report:
    get:
      tags:
        - report
      summary: Get a comprehensive report
      parameters:
        - name: province
          in: query
          required: false
          description: Province for which the report is requested (in Thai).
          schema:
            type: string
            example: "เชียงใหม่"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                {
                  "patient_and_osm": {
                    "osm": {
                      "accuracy": "100.00",
                      "ai_predict": {
                        "normal": 0,
                        "opmd": 3,
                        "oscc": 1
                      },
                      "dentist_diagnose": {
                        "normal": 0,
                        "not_diagnosed": 0,
                        "opmd": 3,
                        "oscc": 1,
                        "others": 0,
                        "poor_image": 0
                      },
                      "total_pic": 4
                    },
                    "patient": {
                      "accuracy": "50.00",
                      "ai_predict": {
                        "normal": 1,
                        "opmd": 0,
                        "oscc": 1
                      },
                      "dentist_diagnose": {
                        "normal": 0,
                        "not_diagnosed": 1,
                        "opmd": 0,
                        "oscc": 1,
                        "others": 0,
                        "poor_image": 0
                      },
                      "total_pic": 2
                    },
                    "total": {
                      "accuracy": "75.00",
                      "ai_predict": {
                        "normal": 1,
                        "opmd": 3,
                        "oscc": 2
                      },
                      "dentist_diagnose": {
                        "normal": 0,
                        "not_diagnosed": 1,
                        "opmd": 3,
                        "oscc": 2,
                        "others": 0,
                        "poor_image": 0
                      },
                      "total_pic": 6
                    }
                  },
                  "province": "เชียงใหม่",
                  "specialist": [
                    {
                      "ai_predict": {
                        "normal": 4,
                        "opmd": 4,
                        "oscc": 1
                      },
                      "dentist_diagnose": {
                        "agree": 0,
                        "disagree": 0
                      },
                      "job": "Computer Technical Officer",
                      "total_pic": 9
                    },
                    {
                      "ai_predict": {
                        "normal": 1,
                        "opmd": 4,
                        "oscc": 2
                      },
                      "dentist_diagnose": {
                        "agree": 3,
                        "disagree": 1
                      },
                      "job": "Oral Pathologist",
                      "total_pic": 7
                    },
                    {
                      "ai_predict": {
                        "normal": 5,
                        "opmd": 8,
                        "oscc": 3
                      },
                      "dentist_diagnose": {
                        "agree": 3,
                        "disagree": 1
                      },
                      "specialist": "total",
                      "total_pic": 16
                    }
                  ],
                  "total_pic": {
                    "ai_predict": {
                      "normal": 6,
                      "opmd": 11,
                      "oscc": 5
                    },
                    "total_pic": 22
                  }
                }
        '400':
          description: Invalid request parameters
          content:
            application/json:
              example:
                status: "error"
                message: "Invalid request parameters."
  /admin_page:
    get:
      tags:
        - admin
      summary: Get list of users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              example:
                # Example user list here
  /delete_user/:
    delete:
      tags:
        - admin
      summary: Delete a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The ID of the user to delete.
                  example: 123
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User with ID 123 deleted successfully.
        '400':
          description: No user ID provided
          content:
            application/json:
              example:
                error: "No user ID provided"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An error occurred while deleting the user."
  /edit_user_info/:
      get:
        tags:
          - admin
        summary: Get information for editing a specific user
        parameters:
          - name: id
            in: query
            required: true
            description: The ID of the user to fetch information for editing.
            schema:
              type: integer
              example: 123
        responses:
          '200':
            description: User information retrieved successfully
            content:
              application/json:
                example:
                  data:
                    id: 123
                    name: "John"
                    surname: "Doe"
                    job_position: "Technician"
                    is_patient: 0
                    is_osm: 1
                    is_specialist: 0
                    is_admin: 0
                    email: "john.doe@example.com"
                    province: "Chiang Mai"
                    national_id: "1234567890123"
                    hospital: "Chiang Mai Hospital"
                    phone: "0801234567"
          '400':
            description: Missing or invalid user ID
            content:
              application/json:
                example:
                  status: "error"
                  message: "No user ID provided."
          '404':
            description: User not found
            content:
              application/json:
                example:
                  status: "error"
                  message: "User not found."
          '500':
            description: Internal Server Error
            content:
              application/json:
                example:
                  status: "error"
                  message: "An internal error occurred."
  /submit_info/:
    put:
      tags:
        - admin
      summary: Submit updated user information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John"
                surname:
                  type: string
                  example: "Doe"
                job_position:
                  type: string
                  example: "Specialist"
                is_patient:
                  type: boolean
                  example: false
                is_osm:
                  type: boolean
                  example: true
                is_specialist:
                  type: boolean
                  example: true
                is_admin:
                  type: boolean
                  example: false
                email:
                  type: string
                  example: "john.doe@example.com"
                province:
                  type: string
                  example: "กรุงเทพมหานคร"
                national_id:
                  type: string
                  example: "1234567890123"
                hospital:
                  type: string
                  example: "Bangkok Hospital"
                phone:
                  type: string
                  example: "0812345678"
      responses:
        '200':
          description: User information updated successfully
          content:
            application/json:
              example:
                message: "User information updated successfully."
        '400':
          description: Missing required fields
          content:
            application/json:
              example:
                error: "Missing required field: phone"
        '500':
          description: Internal server error
          content:
            application/json:
              example:
                error: "An error occurred while updating user information."


  /verify/user:
    get:
      tags:
        - login
      summary: Verify user by key
      description: This endpoint verifies a user by their `thid` or `username` in the `aidoc_development` database or by their `thid` in the `oralcancer` database.
      parameters:
        - name: key
          in: query
          required: true
          description: The identifier to search for a user. Can be either `thid` or `username`.
          schema:
            type: string
            example: "1234567890"
      responses:
        200:
          description: User found in the `aidoc_development` database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  thid:
                    type: string
                    example: "1234567890"
                  username:
                    type: string
                    example: "johndoe"
                  role:
                    type: array
                    items:
                      type: string
                    example: ["admin", "editor"]
        201:
          description: User found in the `oralcancer` database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  thid:
                    type: string
                    example: "1234567890"
                  first_name:
                    type: string
                    example: "John"
                  last_name:
                    type: string
                    example: "Doe"
                  gender:
                    type: string
                    example: "Male"
                  dob:
                    type: string
                    format: date
                    example: "1985-06-15"
                  province:
                    type: string
                    example: "Bangkok"
                  district:
                    type: string
                    example: "Chatuchak"
                  subdistrict:
                    type: string
                    example: "Lat Yao"
                  address1:
                    type: string
                    example: "123 Main Street"
                  mobile:
                    type: string
                    example: "+66812345678"
                  career:
                    type: string
                    example: "Teacher"
        400:
          description: Missing required `key` parameter.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "key is required"
        401:
          description: User not found in either database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "user not found"
  /get_user:
    get:
      tags:
        - login
      summary: Hash the user password
      description: This endpoint hashes the provided password using a secure hashing algorithm and returns the hashed password.
      parameters:
        - name: password
          in: query
          required: true
          schema:
            type: string
            example: P@ssword
          description: Password to be hashed.
      responses:
        "200":
          description: Password hashed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  hashed_password:
                    type: string
      security:
        - BearerAuth: []  # Add security definition for this route
  /logout:
    post:
      tags:
        - login
      summary: Logout the user
      description: This endpoint logs out the user by invalidating the current JWT token.
      responses:
        "200":
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: Successfully logged out
      security:
        - BearerAuth: []  # Apply JWT security for this route
  /verify/passkey/:
      get:
        tags:
          - login
        summary: Verify user credentials
        description: Verifies a user by username/password or by thid/mobile using query parameters.
        parameters:
          - name: username
            in: query
            required: false
            schema:
              type: string
              example: adminbest
            description: Username of the user.
          - name: password
            in: query
            required: false
            schema:
              type: string
              example: 12345678
            description: Password of the user.
          - name: thid
            in: query
            required: false
            schema:
              type: string
            description: Thai ID of the user.
          - name: mobile
            in: query
            required: false
            schema:
              type: string
            description: Mobile number of the user.
        responses:
          "200":
            description: User verified successfully
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: valid credential.
          "400":
            description: Bad request due to missing or invalid input
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Invalid request format. Provide either username/password or thid/mobile.
          "401":
            description: Unauthorized due to invalid credentials
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: invalid username/password or thid/mobile.
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT  
